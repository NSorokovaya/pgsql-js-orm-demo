generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  post_id    String    @db.Uuid
  user_id    String    @db.Uuid
  content    String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model permissions {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title            String             @db.VarChar(255)
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  updated_at       DateTime?          @default(now()) @db.Timestamp(6)
  deleted_at       DateTime?          @db.Timestamp(6)
  role_permissions role_permissions[]
  user_permissions user_permissions[]
}

model posts {
  id                 String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id            String               @db.Uuid
  title              String               @db.VarChar(255)
  content            String?
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @default(now()) @db.Timestamp(6)
  deleted_at         DateTime?            @db.Timestamp(6)
  comments           comments[]
  users              users                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reactions_to_posts reactions_to_posts[]
}

model reactions {
  id                 String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title              String               @db.VarChar(255)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @default(now()) @db.Timestamp(6)
  deleted_at         DateTime?            @db.Timestamp(6)
  reactions_to_posts reactions_to_posts[]
}

model reactions_to_posts {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String    @db.Uuid
  post_id     String    @db.Uuid
  reaction_id String    @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  deleted_at  DateTime? @db.Timestamp(6)
  posts       posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reactions   reactions @relation(fields: [reaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model role_permissions {
  role_id       String      @db.Uuid
  permission_id String      @db.Uuid
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([role_id, permission_id])
}

model roles {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title            String             @db.VarChar(255)
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  updated_at       DateTime?          @default(now()) @db.Timestamp(6)
  deleted_at       DateTime?          @db.Timestamp(6)
  role_permissions role_permissions[]
  user_roles       user_roles[]
}

model user_avatars {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?   @unique @db.Uuid
  avatar_url String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_permissions {
  user_id       String      @db.Uuid
  permission_id String      @db.Uuid
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, permission_id])
}

model user_roles {
  user_id String @db.Uuid
  role_id String @db.Uuid
  roles   roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_id])
}

model users {
  id                 String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username           String               @db.VarChar(255)
  password           String               @db.VarChar(255)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @default(now()) @db.Timestamp(6)
  deleted_at         DateTime?            @db.Timestamp(6)
  comments           comments[]
  posts              posts[]
  reactions_to_posts reactions_to_posts[]
  user_avatars       user_avatars?
  user_permissions   user_permissions[]
  user_roles         user_roles[]
}
